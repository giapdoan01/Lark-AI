import { bitable } from "@lark-base-open/js-sdk"

export interface TableRecord extends Record<string, unknown> {
  recordId: string
  fields: Record<string, unknown>
}

// H√†m chuy·ªÉn gi√° tr·ªã th√†nh chu·ªói an to√†n cho CSV
const escapeCSVValue = (value: unknown): string => {
  if (value === null || value === undefined) return ""
  const str = String(value)
  // Tho√°t d·∫•u ngo·∫∑c k√©p v√† b·ªçc gi√° tr·ªã ch·ª©a d·∫•u ph·∫©y ho·∫∑c ngo·∫∑c k√©p
  if (str.includes(",") || str.includes('"') || str.includes("\n")) {
    return `"${str.replace(/"/g, '""')}"`
  }
  return str
}

// Function l·∫•y T·∫§T C·∫¢ d·ªØ li·ªáu d∆∞·ªõi d·∫°ng CSV
export const getTableDataAsCSV = async (tableId: string): Promise<string> => {
  try {
    console.log("üöÄ === GETTING ALL TABLE DATA AS CSV ===")
    const table = await bitable.base.getTableById(tableId)

    // L·∫•y metadata c·ªßa c√°c fields
    const fieldMetaList = await table.getFieldMetaList()
    console.log("üìä Field metadata:", fieldMetaList)

    // T·∫°o header CSV
    const headers = ["recordId", ...fieldMetaList.map((field) => field.name)]
    let csvContent = headers.map(escapeCSVValue).join(",") + "\n"

    let pageToken: string | undefined = undefined
    let pageNumber = 1
    const pageSize = 1000
    let totalRecords = 0

    // L·∫∑p qua t·∫•t c·∫£ c√°c trang
    do {
      console.log(`üìÑ ƒêang l·∫•y trang ${pageNumber}...`)

      const options: any = { pageSize }
      if (pageToken) {
        options.pageToken = pageToken
      }

      const result = await table.getRecords(options)
      const currentPageRecords = result.records

      console.log(`üìä Trang ${pageNumber}: ${currentPageRecords.length} records`)

      // X·ª≠ l√Ω t·ª´ng record
      for (const record of currentPageRecords) {
        const row: string[] = [record.recordId]
        for (const fieldMeta of fieldMetaList) {
          try {
            let cellValue = await table.getCellValue(fieldMeta.id, record.recordId)
            if (cellValue && typeof cellValue === "object" && (cellValue as any).text) {
              cellValue = (cellValue as any).text
            }
            row.push(escapeCSVValue(cellValue))
          } catch (cellError) {
            console.warn(`‚ö†Ô∏è Cannot get field ${fieldMeta.name} for record ${record.recordId}:`, cellError)
            row.push("")
          }
        }
        csvContent += row.join(",") + "\n"
        totalRecords++
      }

      pageToken = result.hasMore ? result.pageToken : undefined
      pageNumber++
      console.log(`üìä ƒê√£ x·ª≠ l√Ω: ${totalRecords} records t·ªïng c·ªông`)

      if (result.hasMore) {
        console.log(`‚û°Ô∏è C√≤n d·ªØ li·ªáu, ti·∫øp t·ª•c trang ${pageNumber}...`)
      } else {
        console.log(`‚úÖ ƒê√£ l·∫•y h·∫øt t·∫•t c·∫£ d·ªØ li·ªáu!`)
      }
    } while (pageToken)

    console.log(`üéâ HO√ÄN TH√ÄNH: ƒê√£ l·∫•y t·ªïng c·ªông ${totalRecords} records d∆∞·ªõi d·∫°ng CSV`)
    console.log(`üìä CSV size: ${csvContent.length} characters`)

    return csvContent
  } catch (error) {
    console.error("‚ùå getTableDataAsCSV failed:", error)
    throw error
  }
}

// C√°c h√†m kh√°c gi·ªØ nguy√™n (getTableStats, testTableDataSample, debugTableStructure, testTableAccess, checkSDKStatus)
export const getTableData = async (tableId: string): Promise<TableRecord[]> => {
  // ... (gi·ªØ nguy√™n code g·ªëc)
}

export const getTableStats = async (tableId: string) => {
  // ... (gi·ªØ nguy√™n code g·ªëc)
}

export const testTableDataSample = async (tableId: string, sampleSize = 5): Promise<TableRecord[]> => {
  // ... (gi·ªØ nguy√™n code g·ªëc)
}

export const debugTableStructure = async (tableId: string) => {
  // ... (gi·ªØ nguy√™n code g·ªëc)
}

export const testTableAccess = async (tableId: string) => {
  // ... (gi·ªØ nguy√™n code g·ªëc)
}

export const checkSDKStatus = async () => {
  // ... (gi·ªØ nguy√™n code g·ªëc)
}