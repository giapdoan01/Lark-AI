import { bitable } from "@lark-base-open/js-sdk"

export interface TableRecord extends Record<string, unknown> {
  recordId: string
  fields: Record<string, unknown>
}

// Ph∆∞∆°ng ph√°p 1: S·ª≠ d·ª•ng getRecordList (API m·ªõi nh·∫•t)
export const getTableDataMethod1 = async (tableId: string): Promise<TableRecord[]> => {
  try {
    console.log("üîç Method 1: S·ª≠ d·ª•ng getRecordList...")
    const table = await bitable.base.getTableById(tableId)

    // Th·ª≠ s·ª≠ d·ª•ng getRecordList v·ªõi pagination
    if (typeof (table as any).getRecordList === "function") {
      const result = await (table as any).getRecordList({
        pageSize: 100, // L·∫•y t·ªëi ƒëa 100 records
      })

      console.log("üìä getRecordList result:", result)

      if (result && result.records) {
        return result.records.map((record: any) => ({
          recordId: record.recordId || record.id,
          fields: record.fields || record,
        }))
      }
    }

    throw new Error("getRecordList kh√¥ng kh·∫£ d·ª•ng")
  } catch (error) {
    console.error("‚ùå Method 1 failed:", error)
    throw error
  }
}

// Ph∆∞∆°ng ph√°p 2: S·ª≠ d·ª•ng view ƒë·ªÉ l·∫•y d·ªØ li·ªáu
export const getTableDataMethod2 = async (tableId: string): Promise<TableRecord[]> => {
  try {
    console.log("üîç Method 2: S·ª≠ d·ª•ng view...")
    const table = await bitable.base.getTableById(tableId)
    const views = await table.getViewList()

    if (views.length === 0) {
      throw new Error("Kh√¥ng c√≥ view n√†o")
    }

    const view = views[0]
    console.log("üìä S·ª≠ d·ª•ng view:", view)

    // Th·ª≠ c√°c c√°ch kh√°c nhau ƒë·ªÉ l·∫•y records t·ª´ view
    const methods = ["getRecordList", "getRecords", "getVisibleRecordIdList"]

    for (const method of methods) {
      if (typeof (view as any)[method] === "function") {
        console.log(`üîç Th·ª≠ ${method}...`)
        try {
          const result = await (view as any)[method]()
          console.log(`üìä ${method} result:`, result)

          if (Array.isArray(result)) {
            return result.map((record: any) => ({
              recordId: record.recordId || record.id || record,
              fields: record.fields || {},
            }))
          } else if (result && result.records) {
            return result.records.map((record: any) => ({
              recordId: record.recordId || record.id,
              fields: record.fields || record,
            }))
          }
        } catch (methodError) {
          console.log(`‚ùå ${method} failed:`, methodError)
        }
      }
    }

    throw new Error("Kh√¥ng th·ªÉ l·∫•y records t·ª´ view")
  } catch (error) {
    console.error("‚ùå Method 2 failed:", error)
    throw error
  }
}

// Ph∆∞∆°ng ph√°p 3: S·ª≠ d·ª•ng getRecordIdList v√† l·∫•y t·ª´ng record
export const getTableDataMethod3 = async (tableId: string): Promise<TableRecord[]> => {
  try {
    console.log("üîç Method 3: S·ª≠ d·ª•ng getRecordIdList...")
    const table = await bitable.base.getTableById(tableId)

    // L·∫•y danh s√°ch ID records
    const recordIds = await table.getRecordIdList()
    console.log("üìä Record IDs:", recordIds)

    if (recordIds.length === 0) {
      return []
    }

    // L·∫•y t·ª´ng record theo ID
    const records: TableRecord[] = []
    for (const recordId of recordIds.slice(0, 50)) {
      // Gi·ªõi h·∫°n 50 records ƒë·∫ßu ti√™n
      try {
        const record = await table.getRecordById(recordId)
        console.log(`üìù Record ${recordId}:`, record)

        // Th·ª≠ c√°c c√°ch kh√°c nhau ƒë·ªÉ l·∫•y fields
        let fields = {}

        if (typeof record.getFieldValueList === "function") {
          fields = await record.getFieldValueList()
        } else if (record.fields) {
          fields = record.fields
        } else if (typeof record.getCellValueList === "function") {
          fields = await record.getCellValueList()
        }

        records.push({
          recordId: recordId,
          fields: fields,
        })
      } catch (recordError) {
        console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y record ${recordId}:`, recordError)
      }
    }

    return records
  } catch (error) {
    console.error("‚ùå Method 3 failed:", error)
    throw error
  }
}

// Ph∆∞∆°ng ph√°p 4: S·ª≠ d·ª•ng getCellValueList v·ªõi field metadata
export const getTableDataMethod4 = async (tableId: string): Promise<TableRecord[]> => {
  try {
    console.log("üîç Method 4: S·ª≠ d·ª•ng field metadata...")
    const table = await bitable.base.getTableById(tableId)

    // L·∫•y metadata c·ªßa c√°c fields
    const fieldMetaList = await table.getFieldMetaList()
    console.log("üìä Field metadata:", fieldMetaList)

    // L·∫•y danh s√°ch record IDs
    const recordIds = await table.getRecordIdList()
    console.log("üìä Record IDs:", recordIds)

    if (recordIds.length === 0) {
      return []
    }

    const records: TableRecord[] = []

    for (const recordId of recordIds.slice(0, 20)) {
      // Gi·ªõi h·∫°n 20 records
      try {
        const record = await table.getRecordById(recordId)
        const fields: Record<string, unknown> = {}

        // L·∫•y gi√° tr·ªã t·ª´ng field
        for (const fieldMeta of fieldMetaList) {
          try {
            const cellValue = await record.getCellValue(fieldMeta.id)
            fields[fieldMeta.name] = cellValue
          } catch (cellError) {
            console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y cell ${fieldMeta.name}:`, cellError)
            fields[fieldMeta.name] = null
          }
        }

        records.push({
          recordId: recordId,
          fields: fields,
        })
      } catch (recordError) {
        console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y record ${recordId}:`, recordError)
      }
    }

    return records
  } catch (error) {
    console.error("‚ùå Method 4 failed:", error)
    throw error
  }
}

// Function ch√≠nh th·ª≠ t·∫•t c·∫£ c√°c ph∆∞∆°ng ph√°p
export const getTableData = async (tableId: string): Promise<TableRecord[]> => {
  const methods = [
    { name: "Method 1 (getRecordList)", fn: getTableDataMethod1 },
    { name: "Method 2 (view)", fn: getTableDataMethod2 },
    { name: "Method 3 (getRecordIdList)", fn: getTableDataMethod3 },
    { name: "Method 4 (field metadata)", fn: getTableDataMethod4 },
  ]

  for (const method of methods) {
    try {
      console.log(`üöÄ Th·ª≠ ${method.name}...`)
      const result = await method.fn(tableId)

      if (result && result.length > 0) {
        console.log(`‚úÖ ${method.name} th√†nh c√¥ng! L·∫•y ƒë∆∞·ª£c ${result.length} records`)
        return result
      } else {
        console.log(`‚ö†Ô∏è ${method.name} tr·∫£ v·ªÅ d·ªØ li·ªáu r·ªóng`)
      }
    } catch (error) {
      console.log(`‚ùå ${method.name} th·∫•t b·∫°i:`, error)
    }
  }

  // N·∫øu t·∫•t c·∫£ ƒë·ªÅu th·∫•t b·∫°i, tr·∫£ v·ªÅ m·∫£ng r·ªóng v·ªõi th√¥ng tin debug
  console.log("‚ùå T·∫•t c·∫£ ph∆∞∆°ng ph√°p ƒë·ªÅu th·∫•t b·∫°i")
  return []
}

// Function debug chi ti·∫øt
export const debugTableStructure = async (tableId: string) => {
  try {
    console.log("üîç === DEBUG TABLE STRUCTURE ===")
    const table = await bitable.base.getTableById(tableId)

    console.log("üìã Table object:", table)
    console.log("üìã Table methods:", Object.getOwnPropertyNames(Object.getPrototypeOf(table)))

    // Debug field metadata
    try {
      const fieldMetaList = await table.getFieldMetaList()
      console.log("üìä Fields:", fieldMetaList)
    } catch (e) {
      console.log("‚ùå Cannot get field metadata:", e)
    }

    // Debug views
    try {
      const views = await table.getViewList()
      console.log("üëÅÔ∏è Views:", views)

      if (views.length > 0) {
        const view = views[0]
        console.log("üëÅÔ∏è First view methods:", Object.getOwnPropertyNames(Object.getPrototypeOf(view)))
      }
    } catch (e) {
      console.log("‚ùå Cannot get views:", e)
    }

    // Debug record IDs
    try {
      const recordIds = await table.getRecordIdList()
      console.log("üìù Record IDs:", recordIds)
      console.log("üìù Total records:", recordIds.length)

      if (recordIds.length > 0) {
        const firstRecordId = recordIds[0]
        const record = await table.getRecordById(firstRecordId)
        console.log("üìù First record:", record)
        console.log("üìù First record methods:", Object.getOwnPropertyNames(Object.getPrototypeOf(record)))
      }
    } catch (e) {
      console.log("‚ùå Cannot get record IDs:", e)
    }

    console.log("üîç === END DEBUG ===")
  } catch (error) {
    console.error("‚ùå Debug failed:", error)
  }
}

export const checkSDKStatus = async () => {
  try {
    console.log("üîç Ki·ªÉm tra tr·∫°ng th√°i SDK...")

    if (!bitable) {
      return { status: "error", message: "SDK ch∆∞a ƒë∆∞·ª£c load" }
    }

    const tables = await bitable.base.getTableMetaList()
    console.log("üìã Danh s√°ch b·∫£ng:", tables)

    return {
      status: "success",
      message: `SDK ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng. T√¨m th·∫•y ${tables.length} b·∫£ng.`,
      tables,
    }
  } catch (error) {
    console.error("‚ùå L·ªói khi ki·ªÉm tra SDK:", error)
    return {
      status: "error",
      message: `SDK c√≥ l·ªói: ${error}`,
    }
  }
}
