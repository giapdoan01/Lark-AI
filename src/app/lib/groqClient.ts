import { Groq } from "groq-sdk"

// Danh s√°ch API keys
const API_KEYS = [
  process.env.NEXT_PUBLIC_GROQ_API_KEY_1 || "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",
  process.env.NEXT_PUBLIC_GROQ_API_KEY_2 || "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",
  process.env.NEXT_PUBLIC_GROQ_API_KEY_3 || "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",
  process.env.NEXT_PUBLIC_GROQ_API_KEY_4 || "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",
  process.env.NEXT_PUBLIC_GROQ_API_KEY_5 || "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",
].filter((key) => key && !key.includes("account") && key.startsWith("gsk_"))

const AVAILABLE_MODELS = [
  "llama-3.3-70b-versatile", // Ch·ªâ d√πng model n√†y
]

// Function ∆∞·ªõc t√≠nh s·ªë tokens (1 token ‚âà 4 characters)
const estimateTokens = (text: string): number => {
  return Math.ceil(text.length / 4)
}

// Th√™m function test single chunk tr∆∞·ªõc khi ch·∫°y pipeline
const testSingleChunk = async (chunk: any[], keyIndex: number): Promise<boolean> => {
  try {
    const apiKey = API_KEYS[keyIndex]
    const chunkText = JSON.stringify(chunk, null, 1)
    const estimatedTokens = estimateTokens(chunkText)

    console.log(`üß™ Test chunk: ${chunk.length} records, ~${estimatedTokens} tokens`)

    if (estimatedTokens > 30000) {
      console.log(`‚ö†Ô∏è Chunk qu√° l·ªõn (${estimatedTokens} tokens), c·∫ßn chia nh·ªè h∆°n`)
      return false
    }

    const groq = createGroqClient(apiKey)

    // Test v·ªõi prompt ƒë∆°n gi·∫£n
    const testCompletion = await groq.chat.completions.create({
      model: "llama-3.3-70b-versatile",
      messages: [
        {
          role: "user",
          content: "Test: Return 'OK'",
        },
      ],
      temperature: 0.1,
      max_tokens: 10,
    })

    const response = testCompletion?.choices?.[0]?.message?.content
    console.log(`‚úÖ Key ${keyIndex + 1} test OK: ${response}`)
    return true
  } catch (error) {
    console.log(`‚ùå Key ${keyIndex + 1} test failed: ${error}`)
    return false
  }
}

// Function chia d·ªØ li·ªáu theo token limit
const chunkDataByTokens = (data: any[], maxTokensPerChunk = 10000): any[][] => {
  const chunks: any[][] = []
  let currentChunk: any[] = []
  let currentTokens = 0

  console.log(`üìä B·∫Øt ƒë·∫ßu chia ${data.length} records v·ªõi limit ${maxTokensPerChunk} tokens/chunk`)

  for (const record of data) {
    const recordText = JSON.stringify(record, null, 1)
    const recordTokens = estimateTokens(recordText)

    // Log record ƒë·∫ßu ti√™n ƒë·ªÉ debug
    if (currentChunk.length === 0 && chunks.length === 0) {
      console.log(`üìä Sample record tokens: ${recordTokens} (${recordText.length} chars)`)

      // N·∫øu 1 record ƒë√£ qu√° l·ªõn, c·∫£nh b√°o
      if (recordTokens > maxTokensPerChunk) {
        console.warn(`‚ö†Ô∏è Single record qu√° l·ªõn: ${recordTokens} tokens > ${maxTokensPerChunk} limit`)
      }
    }

    // N·∫øu th√™m record n√†y v√†o chunk hi·ªán t·∫°i s·∫Ω v∆∞·ª£t qu√° limit
    if (currentTokens + recordTokens > maxTokensPerChunk && currentChunk.length > 0) {
      console.log(`üìä Chunk ${chunks.length + 1} ho√†n th√†nh: ${currentChunk.length} records, ${currentTokens} tokens`)
      chunks.push([...currentChunk])
      currentChunk = [record]
      currentTokens = recordTokens
    } else {
      currentChunk.push(record)
      currentTokens += recordTokens
    }
  }

  // Th√™m chunk cu·ªëi c√πng n·∫øu c√≥
  if (currentChunk.length > 0) {
    console.log(`üìä Chunk cu·ªëi ${chunks.length + 1}: ${currentChunk.length} records, ${currentTokens} tokens`)
    chunks.push(currentChunk)
  }

  console.log(`üìä K·∫øt qu·∫£ chia: ${chunks.length} chunks t·ª´ ${data.length} records`)

  // N·∫øu ch·ªâ c√≥ 1 chunk v√† qu√° l·ªõn, th·ª≠ chia nh·ªè h∆°n
  if (chunks.length === 1) {
    const singleChunkTokens = estimateTokens(JSON.stringify(chunks[0], null, 1))
    if (singleChunkTokens > 15000) {
      console.log(`‚ö†Ô∏è Single chunk qu√° l·ªõn (${singleChunkTokens} tokens), th·ª≠ chia nh·ªè h∆°n...`)
      return chunkDataByTokens(data, Math.floor(maxTokensPerChunk / 2)) // Chia ƒë√¥i
    }
  }

  return chunks
}

const createGroqClient = (apiKey: string): Groq => {
  return new Groq({
    apiKey: apiKey,
    dangerouslyAllowBrowser: true,
  })
}

// Helper function ƒë·ªÉ ph√¢n t√≠ch v·ªõi 1 key - di chuy·ªÉn l√™n tr∆∞·ªõc
const analyzeWithSingleKey = async (apiKey: string, keyIndex: number, prompt: string): Promise<string> => {
  try {
    console.log(`ü§ñ Ph√¢n t√≠ch v·ªõi key ${keyIndex + 1}`)

    const groq = createGroqClient(apiKey)

    for (const model of AVAILABLE_MODELS) {
      try {
        const completion = (await Promise.race([
          groq.chat.completions.create({
            model: "llama-3.3-70b-versatile", // Ch·ªâ d√πng model n√†y
            messages: [
              {
                role: "user",
                content: prompt,
              },
            ],
            temperature: 0.7,
            max_tokens: 25000, // TƒÉng l√™n 25000
          }),
          new Promise((_, reject) => setTimeout(() => reject(new Error("Timeout 90s")), 90000)), // TƒÉng timeout
        ])) as any

        // Th√™m null checks
        if (!completion?.choices?.[0]?.message?.content) {
          console.log(`‚ö†Ô∏è Model ${model}: Kh√¥ng nh·∫≠n ƒë∆∞·ª£c response`)
          continue
        }

        const analysis = completion.choices[0].message.content || "Kh√¥ng c√≥ ph√¢n t√≠ch"
        console.log(`‚úÖ Ph√¢n t√≠ch th√†nh c√¥ng v·ªõi model ${model}`)

        return analysis
      } catch (modelError) {
        const errorMsg = modelError instanceof Error ? modelError.message : String(modelError)
        console.log(`‚ùå Model ${model}: ${errorMsg}`)
        continue
      }
    }

    throw new Error("T·∫•t c·∫£ models th·∫•t b·∫°i cho ph√¢n t√≠ch cu·ªëi")
  } catch (error) {
    const errorMsg = error instanceof Error ? error.message : String(error)
    console.error(`‚ùå Ph√¢n t√≠ch cu·ªëi th·∫•t b·∫°i: ${errorMsg}`)
    return `‚ùå Kh√¥ng th·ªÉ ph√¢n t√≠ch: ${errorMsg}`
  }
}

// Function ƒë·ªÉ optimize/compress d·ªØ li·ªáu v·ªõi 1 API key
const optimizeDataChunk = async (
  apiKey: string,
  keyIndex: number,
  dataChunk: any[],
  chunkIndex: number,
  totalChunks: number,
): Promise<{ success: boolean; optimizedData: string; keyIndex: number; error?: string }> => {
  try {
    const chunkText = JSON.stringify(dataChunk, null, 2)
    const estimatedTokens = estimateTokens(chunkText)

    console.log(
      `üîß Key ${keyIndex + 1}: Optimize chunk ${chunkIndex + 1}/${totalChunks} (${dataChunk.length} records, ~${estimatedTokens} tokens)`,
    )

    const groq = createGroqClient(apiKey)

    // Prompt ng·∫Øn g·ªçn h∆°n ƒë·ªÉ ti·∫øt ki·ªám tokens
    const optimizePrompt = `Optimize JSON data - remove nulls, compact format, keep all meaningful data:

${chunkText}

Return optimized JSON only:`

    // Ch·ªâ th·ª≠ model duy nh·∫•t
    try {
      console.log(`ü§ñ Key ${keyIndex + 1}: G·ª≠i request v·ªõi ${estimateTokens(optimizePrompt)} tokens`)

      const completion = (await Promise.race([
        groq.chat.completions.create({
          model: "llama-3.3-70b-versatile",
          messages: [
            {
              role: "user",
              content: optimizePrompt,
            },
          ],
          temperature: 0.1,
          max_tokens: 15000, // Gi·∫£m xu·ªëng ƒë·ªÉ an to√†n
        }),
        new Promise((_, reject) => setTimeout(() => reject(new Error("Timeout 60s")), 60000)),
      ])) as any

      // Th√™m null checks
      if (!completion?.choices?.[0]?.message?.content) {
        throw new Error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c response t·ª´ API")
      }

      const optimizedData = completion.choices[0].message.content.trim() || ""

      // Validate JSON
      try {
        JSON.parse(optimizedData)
        console.log(`‚úÖ Key ${keyIndex + 1}: Optimize th√†nh c√¥ng (${optimizedData.length} chars)`)

        return {
          success: true,
          optimizedData: optimizedData,
          keyIndex: keyIndex,
        }
      } catch (jsonError) {
        throw new Error(`Invalid JSON output: ${jsonError}`)
      }
    } catch (modelError) {
      const errorMsg = modelError instanceof Error ? modelError.message : String(modelError)
      console.error(`‚ùå Key ${keyIndex + 1}: ${errorMsg}`)
      throw new Error(errorMsg)
    }
  } catch (error) {
    const errorMsg = error instanceof Error ? error.message : String(error)
    console.error(`‚ùå Key ${keyIndex + 1} optimize th·∫•t b·∫°i: ${errorMsg}`)

    return {
      success: false,
      optimizedData: "",
      keyIndex: keyIndex,
      error: errorMsg,
    }
  }
}

// Function ch√≠nh: Data Preprocessing Pipeline
export const preprocessDataWithPipeline = async (
  data: any[],
  tableName: string,
): Promise<{ success: boolean; optimizedData: string; analysis: string; keyUsage: any }> => {
  try {
    console.log(`üöÄ B·∫Øt ƒë·∫ßu Data Preprocessing Pipeline v·ªõi ${data.length} records`)

    if (!API_KEYS || API_KEYS.length === 0) {
      throw new Error("Kh√¥ng c√≥ API keys h·ª£p l·ªá")
    }

    // Test API keys tr∆∞·ªõc
    console.log(`üß™ Test API keys tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu...`)
    const keyTests = await Promise.all(API_KEYS.slice(0, 3).map((key, index) => testSingleChunk([data[0]], index)))
    const workingKeys = keyTests.filter(Boolean).length
    console.log(`üîë ${workingKeys}/${keyTests.length} keys ho·∫°t ƒë·ªông`)

    if (workingKeys === 0) {
      throw new Error("Kh√¥ng c√≥ API keys n√†o ho·∫°t ƒë·ªông")
    }

    // B∆Ø·ªöC 1: Chia d·ªØ li·ªáu th√†nh chunks theo token limit
    console.log(`üìä B∆Ø·ªöC 1: Chia d·ªØ li·ªáu theo token limit (10000 tokens/chunk)`)
    let chunks = chunkDataByTokens(data, 10000)

    // N·∫øu v·∫´n ch·ªâ c√≥ 1 chunk l·ªõn, th·ª≠ strategy kh√°c
    if (chunks.length === 1) {
      const singleChunkTokens = estimateTokens(JSON.stringify(chunks[0], null, 1))
      console.log(`‚ö†Ô∏è Ch·ªâ c√≥ 1 chunk v·ªõi ${singleChunkTokens} tokens`)

      if (singleChunkTokens > 20000) {
        console.log(`üîÑ Fallback: Chia theo s·ªë records thay v√¨ tokens`)
        // Chia theo s·ªë records
        const recordsPerChunk = Math.ceil(data.length / Math.max(API_KEYS.length - 1, 2))
        chunks = []
        for (let i = 0; i < data.length; i += recordsPerChunk) {
          chunks.push(data.slice(i, i + recordsPerChunk))
        }
        console.log(`üìä Fallback result: ${chunks.length} chunks v·ªõi ${recordsPerChunk} records/chunk`)
      }
    }

    // Log th√¥ng tin chi ti·∫øt v·ªÅ chunks
    chunks.forEach((chunk, index) => {
      const chunkText = JSON.stringify(chunk, null, 1)
      const estimatedTokens = estimateTokens(chunkText)
      console.log(`üìä Chunk ${index + 1}: ${chunk.length} records, ~${estimatedTokens} tokens`)
    })

    // B∆Ø·ªöC 2: Optimize t·ª´ng chunk v·ªõi better error handling
    console.log(`‚è≥ B∆Ø·ªöC 2: ƒêang optimize ${chunks.length} chunks...`)

    const optimizeResults = []

    // X·ª≠ l√Ω t·ª´ng chunk m·ªôt ƒë·ªÉ debug t·ªët h∆°n
    for (let i = 0; i < chunks.length; i++) {
      const chunk = chunks[i]
      const keyIndex = i % (API_KEYS.length - 1)

      console.log(`üîß X·ª≠ l√Ω chunk ${i + 1}/${chunks.length} v·ªõi key ${keyIndex + 1}`)

      try {
        const result = await optimizeDataChunk(API_KEYS[keyIndex], keyIndex, chunk, i, chunks.length)
        optimizeResults.push(result)

        if (result.success) {
          console.log(`‚úÖ Chunk ${i + 1}: Th√†nh c√¥ng`)
        } else {
          console.log(`‚ùå Chunk ${i + 1}: Th·∫•t b·∫°i - ${result.error}`)
        }
      } catch (error) {
        console.log(`‚ùå Chunk ${i + 1}: Exception - ${error}`)
        optimizeResults.push({
          success: false,
          optimizedData: "",
          keyIndex: keyIndex,
          error: String(error),
        })
      }

      // Delay gi·ªØa c√°c requests
      if (i < chunks.length - 1) {
        await new Promise((resolve) => setTimeout(resolve, 1000))
      }
    }

    // Debug chi ti·∫øt k·∫øt qu·∫£
    console.log(`üîç DEBUG: Optimize results details:`)
    optimizeResults.forEach((result, index) => {
      if (result.success) {
        console.log(`‚úÖ Chunk ${index + 1}: Success (Key ${result.keyIndex + 1})`)
      } else {
        console.log(`‚ùå Chunk ${index + 1}: Failed (Key ${result.keyIndex + 1}) - ${result.error}`)
      }
    })

    // Ki·ªÉm tra k·∫øt qu·∫£ optimize
    const successfulOptimizes = optimizeResults.filter((r) => r && r.success)
    const failedOptimizes = optimizeResults.filter((r) => r && !r.success)

    console.log(`üìä Optimize results: ${successfulOptimizes.length}/${optimizeResults.length} th√†nh c√¥ng`)

    // N·∫øu t·∫•t c·∫£ th·∫•t b·∫°i, th·ª≠ fallback v·ªõi raw data
    if (successfulOptimizes.length === 0) {
      console.log(`üîÑ FALLBACK: T·∫•t c·∫£ optimize th·∫•t b·∫°i, s·ª≠ d·ª•ng raw data`)

      // S·ª≠ d·ª•ng raw data (r√∫t g·ªçn)
      const rawData = JSON.stringify(data.slice(0, 20), null, 1) // Ch·ªâ l·∫•y 20 records ƒë·∫ßu

      const keyUsage = {
        totalKeys: API_KEYS.length,
        optimizeKeys: 0,
        analysisKey: 1,
        failedKeys: failedOptimizes.length,
        successRate: "0%",
        chunks: chunks.length,
        successfulChunks: 0,
        finalDataSize: rawData.length,
        fallback: true,
      }

      return {
        success: true,
        optimizedData: rawData,
        analysis: `‚ö†Ô∏è Kh√¥ng th·ªÉ optimize d·ªØ li·ªáu, s·ª≠ d·ª•ng ${data.slice(0, 20).length} records ƒë·∫ßu ti√™n t·ª´ t·ªïng ${data.length} records. D·ªØ li·ªáu v·∫´n c√≥ th·ªÉ ƒë∆∞·ª£c ph√¢n t√≠ch nh∆∞ng c√≥ th·ªÉ kh√¥ng ƒë·∫ßy ƒë·ªß.`,
        keyUsage: keyUsage,
      }
    }

    // B∆Ø·ªöC 3: G·ªôp d·ªØ li·ªáu ƒë√£ optimize
    let combinedOptimizedData = "["
    let validChunks = 0

    successfulOptimizes.forEach((result, index) => {
      // Parse v√† merge JSON arrays
      try {
        const parsedData = JSON.parse(result.optimizedData)
        const dataArray = Array.isArray(parsedData) ? parsedData : [parsedData]

        if (validChunks > 0) combinedOptimizedData += ","
        combinedOptimizedData += JSON.stringify(dataArray).slice(1, -1) // Remove [ ]
        validChunks++
      } catch (parseError) {
        console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ parse optimize result t·ª´ key ${result.keyIndex + 1}:`, parseError)
      }
    })
    combinedOptimizedData += "]"

    console.log(`üìä B∆Ø·ªöC 3: ƒê√£ g·ªôp ${validChunks} chunks optimize (${combinedOptimizedData.length} characters)`)

    // B∆Ø·ªöC 4: Ph√¢n t√≠ch t·ªïng h·ª£p v·ªõi key cu·ªëi c√πng
    const finalKeyIndex = API_KEYS.length - 1
    const finalApiKey = API_KEYS[finalKeyIndex]

    if (!finalApiKey) {
      throw new Error("Kh√¥ng c√≥ API key cho ph√¢n t√≠ch cu·ªëi")
    }

    console.log(`ü§ñ B∆Ø·ªöC 4: Ph√¢n t√≠ch t·ªïng h·ª£p v·ªõi key ${finalKeyIndex + 1}`)

    const analysisPrompt = `B·∫°n l√† m·ªôt AI analyst chuy√™n nghi·ªáp. D∆∞·ªõi ƒë√¢y l√† d·ªØ li·ªáu t·ª´ b·∫£ng "${tableName}" ƒë√£ ƒë∆∞·ª£c optimize (${data.length} records g·ªëc, ${validChunks}/${chunks.length} chunks th√†nh c√¥ng):

${combinedOptimizedData}

ƒê√¢y l√† d·ªØ li·ªáu t·ª´ ${data.length} b·∫£n ghi g·ªëc, ƒë√£ ƒë∆∞·ª£c optimize ƒë·ªÉ gi·∫£m token nh∆∞ng v·∫´n gi·ªØ nguy√™n th√¥ng tin quan tr·ªçng.

H√£y ph√¢n t√≠ch chi ti·∫øt:
1. üìä T·ªïng quan v·ªÅ d·ªØ li·ªáu
2. üìà Th·ªëng k√™ quan tr·ªçng  
3. üîç Patterns v√† insights
4. üí° Nh·∫≠n x√©t v√† ƒë√°nh gi√°

Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, chi ti·∫øt v√† c√≥ c·∫•u tr√∫c.`

    const finalAnalysis = await analyzeWithSingleKey(finalApiKey, finalKeyIndex, analysisPrompt)

    const keyUsage = {
      totalKeys: API_KEYS.length,
      optimizeKeys: successfulOptimizes.length,
      analysisKey: 1,
      failedKeys: failedOptimizes.length,
      successRate: `${Math.round((successfulOptimizes.length / optimizeResults.length) * 100)}%`,
      chunks: chunks.length,
      successfulChunks: validChunks,
      finalDataSize: combinedOptimizedData.length,
    }

    return {
      success: true,
      optimizedData: combinedOptimizedData,
      analysis: finalAnalysis,
      keyUsage: keyUsage,
    }
  } catch (error) {
    console.error("‚ùå Data Preprocessing Pipeline failed:", error)
    return {
      success: false,
      optimizedData: "",
      analysis: `‚ùå L·ªói preprocessing pipeline: ${error}`,
      keyUsage: { error: true },
    }
  }
}

// Function tr·∫£ l·ªùi c√¢u h·ªèi v·ªõi d·ªØ li·ªáu ƒë√£ optimize
export const answerQuestionWithOptimizedData = async (
  optimizedData: string,
  tableName: string,
  question: string,
  originalRecordCount: number,
): Promise<string> => {
  try {
    console.log(`ü§î Tr·∫£ l·ªùi c√¢u h·ªèi v·ªõi optimized data (${originalRecordCount} records)`)

    // S·ª≠ d·ª•ng key cu·ªëi c√πng ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi
    const finalKeyIndex = API_KEYS.length - 1
    const finalApiKey = API_KEYS[finalKeyIndex]

    if (!finalApiKey) {
      throw new Error("Kh√¥ng c√≥ API key ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi")
    }

    const questionPrompt = `B·∫°n l√† m·ªôt AI assistant th√¥ng minh. D∆∞·ªõi ƒë√¢y l√† TO√ÄN B·ªò d·ªØ li·ªáu t·ª´ b·∫£ng "${tableName}" (${originalRecordCount} records ƒë√£ ƒë∆∞·ª£c optimize):

${optimizedData}

ƒê√¢y l√† d·ªØ li·ªáu HO√ÄN CH·ªàNH t·ª´ ${originalRecordCount} b·∫£n ghi. H√£y d·ª±a v√†o d·ªØ li·ªáu n√†y ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi m·ªôt c√°ch ch√≠nh x√°c v√† chi ti·∫øt.

C√¢u h·ªèi: ${question}

Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát:`

    return await analyzeWithSingleKey(finalApiKey, finalKeyIndex, questionPrompt)
  } catch (error) {
    console.error("‚ùå answerQuestionWithOptimizedData failed:", error)
    return `‚ùå L·ªói khi tr·∫£ l·ªùi c√¢u h·ªèi: ${error}`
  }
}

// Export function ch√≠nh thay th·∫ø analyzeDataWithParallelKeys
export const analyzeDataWithParallelKeys = preprocessDataWithPipeline

// Function tr·∫£ l·ªùi c√¢u h·ªèi - s·ª≠ d·ª•ng optimized data
export const answerQuestionWithData = async (
  data: any[],
  tableName: string,
  question: string,
  previousAnalysis?: string,
  optimizedData?: string,
): Promise<string> => {
  try {
    if (optimizedData && optimizedData.length > 0) {
      // N·∫øu c√≥ optimized data, s·ª≠ d·ª•ng n√≥
      return await answerQuestionWithOptimizedData(optimizedData, tableName, question, data.length)
    } else {
      // Fallback: t·∫°o optimized data nhanh
      const quickOptimized = JSON.stringify(data.slice(0, 30), null, 1) // 30 records ƒë·∫ßu
      return await answerQuestionWithOptimizedData(quickOptimized, tableName, question, data.length)
    }
  } catch (error) {
    console.error("‚ùå answerQuestionWithData failed:", error)
    return `‚ùå L·ªói khi tr·∫£ l·ªùi c√¢u h·ªèi: ${error}`
  }
}

// Test functions
export const testAllApiKeys = async (): Promise<{
  success: boolean
  message: string
  workingKeys: number
  totalKeys: number
  keyDetails: any[]
}> => {
  console.log(`üß™ Testing ${API_KEYS.length} API keys...`)

  const testPromises = API_KEYS.map(async (apiKey, index) => {
    try {
      const groq = createGroqClient(apiKey)

      const testCompletion = await groq.chat.completions.create({
        model: "llama-3.3-70b-versatile", // Ch·ªâ test model n√†y
        messages: [
          {
            role: "user",
            content: "Test: 1+1=?",
          },
        ],
        temperature: 0.1,
        max_tokens: 50, // Nh·ªè cho test
      })

      // Th√™m null checks
      const response = testCompletion?.choices?.[0]?.message?.content || "No response"
      console.log(`‚úÖ Key ${index + 1}: OK`)

      return {
        keyIndex: index + 1,
        status: "success" as const,
        response: response,
        preview: `${apiKey.substring(0, 10)}...${apiKey.substring(apiKey.length - 4)}`,
      }
    } catch (error) {
      console.log(`‚ùå Key ${index + 1}: ${error}`)
      return {
        keyIndex: index + 1,
        status: "failed" as const,
        error: error instanceof Error ? error.message : String(error),
        preview: `${apiKey.substring(0, 10)}...${apiKey.substring(apiKey.length - 4)}`,
      }
    }
  })

  const results = await Promise.all(testPromises)
  const workingKeys = results.filter((r) => r.status === "success").length

  return {
    success: workingKeys > 0,
    message: `${workingKeys}/${API_KEYS.length} API keys ho·∫°t ƒë·ªông`,
    workingKeys: workingKeys,
    totalKeys: API_KEYS.length,
    keyDetails: results,
  }
}

// Backward compatibility
export const askAI = async (context: string, question: string): Promise<string> => {
  return await answerQuestionWithData([], "Unknown", question)
}

export const askAIWithFullData = async (data: any[], tableName: string, question: string): Promise<string> => {
  return await answerQuestionWithData(data, tableName, question)
}

export const askAIWithRawData = async (data: any[], tableName: string, question: string): Promise<string> => {
  return await answerQuestionWithData(data, tableName, question)
}

export const testGroqAPI = async () => {
  const result = await testAllApiKeys()
  return {
    success: result.success,
    message: result.message,
    workingModel: "pipeline",
  }
}

export const getAvailableModels = (): string[] => {
  return AVAILABLE_MODELS
}

export const getApiKeysInfo = () => {
  return {
    totalKeys: API_KEYS.length,
    keysPreview: API_KEYS.map(
      (key, index) => `Key ${index + 1}: ${key.substring(0, 10)}...${key.substring(key.length - 4)}`,
    ),
  }
}
