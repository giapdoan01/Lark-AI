import { Groq } from "groq-sdk"

// Danh s√°ch 10 API keys t·ª´ 10 accounts kh√°c nhau
const API_KEYS = [
  process.env.NEXT_PUBLIC_GROQ_API_KEY_1 || "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",
  process.env.NEXT_PUBLIC_GROQ_API_KEY_2 || "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",
  process.env.NEXT_PUBLIC_GROQ_API_KEY_3 || "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",
  process.env.NEXT_PUBLIC_GROQ_API_KEY_4 || "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",
  process.env.NEXT_PUBLIC_GROQ_API_KEY_5 || "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",
].filter(
  (key) =>
    key &&
    !key.includes("account") && // L·ªçc b·ªè placeholder keys
    key.startsWith("gsk_"), // Ch·ªâ l·∫•y keys h·ª£p l·ªá
)

const AVAILABLE_MODELS = [
  "llama-3.3-70b-versatile",
  "llama-3.1-8b-instant",
  "llama3-70b-8192",
  "llama3-8b-8192",
  "mixtral-8x7b-32768",
  "gemma-7b-it",
]

// Function t·∫°o Groq client v·ªõi key c·ª• th·ªÉ
const createGroqClient = (apiKey: string): Groq => {
  return new Groq({
    apiKey: apiKey,
    dangerouslyAllowBrowser: true,
  })
}

// S·ª≠a function sendRequestWithKey ƒë·ªÉ c√≥ retry logic t·ªët h∆°n
const sendRequestWithKey = async (
  apiKey: string,
  keyIndex: number,
  messages: any[],
  chunkInfo: string,
): Promise<{ success: boolean; result: string; keyIndex: number; error?: string }> => {
  try {
    console.log(`üîë Key ${keyIndex + 1}/${API_KEYS.length}: ${chunkInfo}`)

    const groq = createGroqClient(apiKey)

    // Th·ª≠ t·ª´ng model v·ªõi timeout
    for (const model of AVAILABLE_MODELS) {
      try {
        console.log(`ü§ñ Key ${keyIndex + 1} th·ª≠ model: ${model}`)

        const chatCompletion = (await Promise.race([
          groq.chat.completions.create({
            model: model,
            messages: messages,
            temperature: 0.7,
            max_tokens: 6000, // Gi·∫£m max_tokens ƒë·ªÉ tr√°nh l·ªói
            top_p: 1,
          }),
          new Promise((_, reject) => setTimeout(() => reject(new Error("Timeout after 30s")), 30000)),
        ])) as any

        const response = chatCompletion.choices[0].message.content || "Kh√¥ng c√≥ ph·∫£n h·ªìi"
        console.log(`‚úÖ Key ${keyIndex + 1} v·ªõi model ${model}: Th√†nh c√¥ng`)

        return {
          success: true,
          result: response,
          keyIndex: keyIndex,
        }
      } catch (modelError) {
        const errorMsg = modelError instanceof Error ? modelError.message : String(modelError)
        console.log(`‚ùå Key ${keyIndex + 1} v·ªõi model ${model}: ${errorMsg}`)

        // N·∫øu l√† rate limit, kh√¥ng th·ª≠ model kh√°c n·ªØa
        if (errorMsg.includes("rate_limit")) {
          break
        }
        continue
      }
    }

    throw new Error("T·∫•t c·∫£ models ƒë·ªÅu th·∫•t b·∫°i cho key n√†y")
  } catch (error) {
    const errorMsg = error instanceof Error ? error.message : String(error)
    console.error(`‚ùå Key ${keyIndex + 1} th·∫•t b·∫°i ho√†n to√†n: ${errorMsg}`)
    return {
      success: false,
      result: "",
      keyIndex: keyIndex,
      error: errorMsg,
    }
  }
}

// Function ch√≠nh: Ph√¢n t√≠ch d·ªØ li·ªáu song song v·ªõi multiple keys
export const analyzeDataWithParallelKeys = async (
  data: any[],
  tableName: string,
): Promise<{ success: boolean; analysis: string; keyUsage: any }> => {
  try {
    console.log(`üöÄ B·∫Øt ƒë·∫ßu ph√¢n t√≠ch song song ${data.length} records v·ªõi ${API_KEYS.length} API keys`)

    if (API_KEYS.length === 0) {
      throw new Error("Kh√¥ng c√≥ API keys h·ª£p l·ªá")
    }

    // Chia d·ªØ li·ªáu th√†nh chunks theo s·ªë l∆∞·ª£ng API keys
    const chunkSize = Math.ceil(data.length / API_KEYS.length)
    const chunks = []

    for (let i = 0; i < data.length; i += chunkSize) {
      chunks.push(data.slice(i, i + chunkSize))
    }

    console.log(`üìä Chia ${data.length} records th√†nh ${chunks.length} chunks (${chunkSize} records/chunk)`)

    // T·∫°o promises cho t·ª´ng chunk v·ªõi key ri√™ng bi·ªát
    const analysisPromises = chunks.map((chunk, index) => {
      const apiKey = API_KEYS[index % API_KEYS.length] // ƒê·∫£m b·∫£o kh√¥ng v∆∞·ª£t qu√° s·ªë keys
      const chunkData = JSON.stringify(chunk, null, 1)

      const messages = [
        {
          role: "system",
          content: `B·∫°n l√† m·ªôt AI assistant chuy√™n ph√¢n t√≠ch d·ªØ li·ªáu. D∆∞·ªõi ƒë√¢y l√† ph·∫ßn ${index + 1}/${chunks.length} c·ªßa d·ªØ li·ªáu t·ª´ b·∫£ng "${tableName}":

${chunkData}

ƒê√¢y l√† ${chunk.length} b·∫£n ghi (t·ª´ ${index * chunkSize + 1} ƒë·∫øn ${Math.min((index + 1) * chunkSize, data.length)}) trong t·ªïng s·ªë ${data.length} b·∫£n ghi.`,
        },
        {
          role: "user",
          content: `H√£y ph√¢n t√≠ch ph·∫ßn d·ªØ li·ªáu n√†y m·ªôt c√°ch chi ti·∫øt, bao g·ªìm:
1. T√≥m t·∫Øt n·ªôi dung ch√≠nh c·ªßa ${chunk.length} records n√†y
2. C√°c th·ªëng k√™ quan tr·ªçng (n·∫øu c√≥)
3. Nh·ªØng ƒëi·ªÉm ƒë√°ng ch√∫ √Ω
4. Xu h∆∞·ªõng ho·∫∑c pattern (n·∫øu ph√°t hi·ªán ƒë∆∞·ª£c)

Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, ng·∫Øn g·ªçn nh∆∞ng ƒë·∫ßy ƒë·ªß th√¥ng tin.`,
        },
      ]

      return sendRequestWithKey(
        apiKey,
        index,
        messages,
        `Chunk ${index + 1}/${chunks.length} (${chunk.length} records)`,
      )
    })

    // Ch·ªù t·∫•t c·∫£ requests ho√†n th√†nh
    console.log(`‚è≥ ƒêang g·ª≠i ${analysisPromises.length} requests song song...`)
    const results = await Promise.all(analysisPromises)

    // Ph√¢n t√≠ch k·∫øt qu·∫£
    const successfulResults = results.filter((r) => r.success)
    const failedResults = results.filter((r) => !r.success)

    console.log(`üìä K·∫øt qu·∫£: ${successfulResults.length}/${results.length} requests th√†nh c√¥ng`)

    if (successfulResults.length === 0) {
      throw new Error("T·∫•t c·∫£ requests ƒë·ªÅu th·∫•t b·∫°i")
    }

    // G·ªôp k·∫øt qu·∫£ t·ª´ c√°c chunks
    let combinedAnalysis = `ü§ñ **PH√ÇN T√çCH T·ªîNG H·ª¢P D·ªÆ LI·ªÜU B·∫¢NG "${tableName.toUpperCase()}"**\n\n`
    combinedAnalysis += `üìä **T·ªïng quan:** ${data.length} b·∫£n ghi ƒë∆∞·ª£c ph√¢n t√≠ch b·∫±ng ${successfulResults.length}/${API_KEYS.length} API keys\n\n`

    successfulResults.forEach((result, index) => {
      const chunkStart = result.keyIndex * chunkSize + 1
      const chunkEnd = Math.min((result.keyIndex + 1) * chunkSize, data.length)

      combinedAnalysis += `**üìã PH·∫¶N ${result.keyIndex + 1} (Records ${chunkStart}-${chunkEnd}):**\n`
      combinedAnalysis += `${result.result}\n\n`
    })

    // Th√™m th√¥ng tin v·ªÅ failed requests n·∫øu c√≥
    if (failedResults.length > 0) {
      combinedAnalysis += `‚ö†Ô∏è **L∆ØU √ù:** ${failedResults.length} ph·∫ßn d·ªØ li·ªáu kh√¥ng th·ªÉ ph√¢n t√≠ch do l·ªói API keys.\n\n`
    }

    // T·∫°o t√≥m t·∫Øt cu·ªëi
    combinedAnalysis += `‚úÖ **K·∫æT LU·∫¨N:** ƒê√£ ho√†n th√†nh ph√¢n t√≠ch song song v·ªõi ${successfulResults.length} API keys. D·ªØ li·ªáu ƒë√£ s·∫µn s√†ng ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi chi ti·∫øt.`

    const keyUsage = {
      totalKeys: API_KEYS.length,
      usedKeys: successfulResults.length,
      failedKeys: failedResults.length,
      successRate: `${Math.round((successfulResults.length / results.length) * 100)}%`,
      chunks: chunks.length,
      recordsPerChunk: chunkSize,
    }

    return {
      success: true,
      analysis: combinedAnalysis,
      keyUsage: keyUsage,
    }
  } catch (error) {
    console.error("‚ùå analyzeDataWithParallelKeys failed:", error)
    return {
      success: false,
      analysis: `‚ùå L·ªói ph√¢n t√≠ch song song: ${error}`,
      keyUsage: { error: true },
    }
  }
}

// S·ª≠a function answerQuestionWithData ƒë·ªÉ c√≥ fallback mechanism t·ªët h∆°n
export const answerQuestionWithData = async (
  data: any[],
  tableName: string,
  question: string,
  previousAnalysis?: string,
): Promise<string> => {
  try {
    console.log(`ü§î Tr·∫£ l·ªùi c√¢u h·ªèi v·ªõi ${data.length} records`)

    if (API_KEYS.length === 0) {
      throw new Error("Kh√¥ng c√≥ API keys h·ª£p l·ªá")
    }

    // Th·ª≠ t·∫•t c·∫£ keys thay v√¨ ch·ªâ 1 key ng·∫´u nhi√™n
    const errors: string[] = []

    for (let keyIndex = 0; keyIndex < API_KEYS.length; keyIndex++) {
      try {
        const selectedKey = API_KEYS[keyIndex]
        console.log(`üîë Th·ª≠ key ${keyIndex + 1}/${API_KEYS.length} ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi`)

        // T·∫°o context v·ªõi d·ªØ li·ªáu t·ªëi ∆∞u ƒë·ªÉ tr√°nh context length qu√° l·ªõn
        const optimizedData = data.slice(0, 50) // Ch·ªâ l·∫•y 50 records ƒë·∫ßu ƒë·ªÉ tr√°nh qu√° l·ªõn

        let context = `B·∫°n l√† m·ªôt AI assistant th√¥ng minh. D∆∞·ªõi ƒë√¢y l√† d·ªØ li·ªáu t·ª´ b·∫£ng "${tableName}" (${data.length} records, hi·ªÉn th·ªã ${optimizedData.length} records ƒë·∫ßu):

${JSON.stringify(optimizedData, null, 1)}`

        if (previousAnalysis) {
          // R√∫t g·ªçn previous analysis ƒë·ªÉ tr√°nh context qu√° d√†i
          const shortAnalysis =
            previousAnalysis.length > 2000
              ? previousAnalysis.substring(0, 2000) + "...\n[Ph√¢n t√≠ch ƒë√£ ƒë∆∞·ª£c r√∫t g·ªçn]"
              : previousAnalysis
          context += `\n\nPh√¢n t√≠ch tr∆∞·ªõc ƒë√≥:\n${shortAnalysis}`
        }

        context += `\n\nL∆∞u √Ω: B·∫£ng c√≥ t·ªïng c·ªông ${data.length} records. H√£y d·ª±a v√†o d·ªØ li·ªáu m·∫´u v√† ph√¢n t√≠ch tr∆∞·ªõc ƒë√≥ ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi m·ªôt c√°ch ch√≠nh x√°c. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát.`

        const messages = [
          {
            role: "system",
            content: context,
          },
          {
            role: "user",
            content: question,
          },
        ]

        const result = await sendRequestWithKey(selectedKey, keyIndex, messages, "Tr·∫£ l·ªùi c√¢u h·ªèi")

        if (result.success) {
          console.log(`‚úÖ Key ${keyIndex + 1} tr·∫£ l·ªùi th√†nh c√¥ng`)
          return result.result
        } else {
          errors.push(`Key ${keyIndex + 1}: ${result.error}`)
          console.log(`‚ùå Key ${keyIndex + 1} th·∫•t b·∫°i: ${result.error}`)
          continue
        }
      } catch (keyError) {
        const errorMsg = keyError instanceof Error ? keyError.message : String(keyError)
        errors.push(`Key ${keyIndex + 1}: ${errorMsg}`)
        console.log(`‚ùå Key ${keyIndex + 1} exception: ${errorMsg}`)
        continue
      }
    }

    // N·∫øu t·∫•t c·∫£ keys ƒë·ªÅu th·∫•t b·∫°i
    throw new Error(`T·∫•t c·∫£ ${API_KEYS.length} API keys ƒë·ªÅu th·∫•t b·∫°i:\n${errors.join("\n")}`)
  } catch (error) {
    console.error("‚ùå answerQuestionWithData failed:", error)

    // Tr·∫£ v·ªÅ th√¥ng tin chi ti·∫øt v·ªÅ l·ªói
    if (error instanceof Error && error.message.includes("T·∫•t c·∫£")) {
      return `‚ùå **T·∫•t c·∫£ API keys ƒë·ªÅu th·∫•t b·∫°i:**

${error.message}

**Kh·∫Øc ph·ª•c:**
1. üîë Ki·ªÉm tra API keys c√≥ h·ª£p l·ªá kh√¥ng
2. ‚è∞ Ch·ªù v√†i ph√∫t n·∫øu b·ªã rate limit
3. üîÑ Th·ª≠ test API keys tr∆∞·ªõc
4. üìù ƒê·∫∑t c√¢u h·ªèi ng·∫Øn g·ªçn h∆°n`
    }

    return `‚ùå L·ªói khi tr·∫£ l·ªùi c√¢u h·ªèi: ${error}`
  }
}

// Function test t·∫•t c·∫£ API keys
export const testAllApiKeys = async (): Promise<{
  success: boolean
  message: string
  workingKeys: number
  totalKeys: number
  keyDetails: any[]
}> => {
  console.log(`üß™ Testing ${API_KEYS.length} API keys...`)

  const testPromises = API_KEYS.map(async (apiKey, index) => {
    try {
      const groq = createGroqClient(apiKey)

      const testCompletion = await groq.chat.completions.create({
        model: "llama-3.1-8b-instant", // Model nhanh ƒë·ªÉ test
        messages: [
          {
            role: "user",
            content: "Test: 1+1=?",
          },
        ],
        temperature: 0.1,
        max_tokens: 10,
      })

      const response = testCompletion.choices[0].message.content
      console.log(`‚úÖ Key ${index + 1}: OK`)

      return {
        keyIndex: index + 1,
        status: "success",
        response: response,
        preview: `${apiKey.substring(0, 10)}...${apiKey.substring(apiKey.length - 4)}`,
      }
    } catch (error) {
      console.log(`‚ùå Key ${index + 1}: ${error}`)
      return {
        keyIndex: index + 1,
        status: "failed",
        error: error instanceof Error ? error.message : String(error),
        preview: `${apiKey.substring(0, 10)}...${apiKey.substring(apiKey.length - 4)}`,
      }
    }
  })

  const results = await Promise.all(testPromises)
  const workingKeys = results.filter((r) => r.status === "success").length

  return {
    success: workingKeys > 0,
    message: `${workingKeys}/${API_KEYS.length} API keys ho·∫°t ƒë·ªông`,
    workingKeys: workingKeys,
    totalKeys: API_KEYS.length,
    keyDetails: results,
  }
}

// Th√™m function ƒë·ªÉ test 1 key c·ª• th·ªÉ
const testSingleKey = async (apiKey: string, keyIndex: number): Promise<{ success: boolean; error?: string }> => {
  try {
    const groq = createGroqClient(apiKey)

    const testCompletion = await groq.chat.completions.create({
      model: "llama-3.1-8b-instant",
      messages: [
        {
          role: "user",
          content: "Test: Xin ch√†o",
        },
      ],
      temperature: 0.1,
      max_tokens: 20,
    })

    const response = testCompletion.choices[0].message.content
    console.log(`‚úÖ Key ${keyIndex + 1} test OK: ${response}`)
    return { success: true }
  } catch (error) {
    const errorMsg = error instanceof Error ? error.message : String(error)
    console.log(`‚ùå Key ${keyIndex + 1} test failed: ${errorMsg}`)
    return { success: false, error: errorMsg }
  }
}

// Backward compatibility functions
export const askAI = async (context: string, question: string): Promise<string> => {
  return await answerQuestionWithData([], "Unknown", question)
}

export const askAIWithFullData = async (data: any[], tableName: string, question: string): Promise<string> => {
  return await answerQuestionWithData(data, tableName, question)
}

export const askAIWithRawData = async (data: any[], tableName: string, question: string): Promise<string> => {
  return await answerQuestionWithData(data, tableName, question)
}

export const testGroqAPI = async () => {
  const result = await testAllApiKeys()
  return {
    success: result.success,
    message: result.message,
    workingModel: "multiple",
  }
}

export const getAvailableModels = (): string[] => {
  return AVAILABLE_MODELS
}

// Function ƒë·ªÉ l·∫•y th√¥ng tin v·ªÅ API keys
export const getApiKeysInfo = () => {
  return {
    totalKeys: API_KEYS.length,
    keysPreview: API_KEYS.map(
      (key, index) => `Key ${index + 1}: ${key.substring(0, 10)}...${key.substring(key.length - 4)}`,
    ),
  }
}
