"use client"
import { useEffect, useState } from "react"
import {
  getTableData,
  getTableStats,
  testTableDataSample,
  checkSDKStatus,
  debugTableStructure,
  testTableAccess,
} from "../lib/base"
import { preprocessDataWithPipeline, answerQuestionWithData, testAllApiKeys } from "../lib/groqClient"

interface ChatBotProps {
  tableId: string
  tableName: string
}

export default function ChatBot({ tableId, tableName }: ChatBotProps) {
  const [tableData, setTableData] = useState<Array<{ recordId: string; fields: Record<string, unknown> }>>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [question, setQuestion] = useState("")
  const [answer, setAnswer] = useState("")
  const [isAsking, setIsAsking] = useState(false)
  const [sdkStatus, setSdkStatus] = useState<string>("")
  const [debugInfo, setDebugInfo] = useState<string>("")
  const [apiStatus, setApiStatus] = useState<string>("")
  const [autoAnalysis, setAutoAnalysis] = useState<string>("")
  const [isAutoAnalyzing, setIsAutoAnalyzing] = useState(false)
  const [tableStats, setTableStats] = useState<any>(null)
  const [loadingProgress, setLoadingProgress] = useState<string>("")
  const [keyUsageInfo, setKeyUsageInfo] = useState<any>(null)
  const [isDataReady, setIsDataReady] = useState(false)
  const [optimizedData, setOptimizedData] = useState<string>("")
  const [pipelineStage, setPipelineStage] = useState<string>("")

  const runDebug = async () => {
    console.log("üîç Ch·∫°y detailed debug...")
    await debugTableStructure(tableId)
    setDebugInfo("Detailed debug completed - check console for comprehensive analysis")
  }

  const testAPI = async () => {
    console.log("üß™ Testing all API keys v·ªõi CSV format...")
    const result = await testAllApiKeys()
    setApiStatus(`CSV API Test: ${result.success ? "‚úÖ" : "‚ùå"} ${result.message}`)
    setDebugInfo(`CSV Key details: ${JSON.stringify(result.keyDetails, null, 2)}`)
  }

  const testTableAccessFunc = async () => {
    console.log("üß™ Testing table access...")
    const result = await testTableAccess(tableId)
    setDebugInfo(`Table access test: ${result ? "‚úÖ Success" : "‚ùå Failed"} - Check console for details`)
  }

  const testSample = async () => {
    console.log("üß™ Testing with sample data...")
    try {
      const sampleData = await testTableDataSample(tableId, 5)
      setDebugInfo(`Sample test: ‚úÖ Got ${sampleData.length} records - Check console for details`)
    } catch (err) {
      setDebugInfo(`Sample test: ‚ùå Failed - ${err}`)
    }
  }

  const loadAllData = async () => {
    console.log("üì• Loading ALL data...")
    setLoading(true)
    setLoadingProgress("ƒêang l·∫•y t·∫•t c·∫£ d·ªØ li·ªáu...")

    try {
      const data = await getTableData(tableId)
      setTableData(data)
      setLoadingProgress("")

      if (data.length > 0) {
        await performDataPreprocessing(data)
      }
    } catch (err) {
      console.error("‚ùå Error loading all data:", err)
      setError(`L·ªói khi l·∫•y t·∫•t c·∫£ d·ªØ li·ªáu: ${err}`)
    } finally {
      setLoading(false)
    }
  }

  // üî• UPDATED: Function preprocessing pipeline v·ªõi CSV format
  const performDataPreprocessing = async (data: Array<{ recordId: string; fields: Record<string, unknown> }>) => {
    if (data.length === 0) return

    // Ki·ªÉm tra xem c√≥ d·ªØ li·ªáu th·ª±c kh√¥ng
    const hasRealData = data.some((record) =>
      Object.values(record.fields).some((value) => value !== null && value !== undefined && value !== ""),
    )

    if (!hasRealData) {
      setAutoAnalysis("‚ö†Ô∏è D·ªØ li·ªáu ch·ªâ c√≥ recordId m√† kh√¥ng c√≥ th√¥ng tin chi ti·∫øt fields. C·∫ßn debug ƒë·ªÉ kh·∫Øc ph·ª•c.")
      return
    }

    setIsAutoAnalyzing(true)
    try {
      console.log(`üöÄ B·∫Øt ƒë·∫ßu CSV Data Preprocessing Pipeline v·ªõi ${data.length} records...`)

      // Stage 1: Chia d·ªØ li·ªáu
      setPipelineStage("üìä ƒêang chia d·ªØ li·ªáu th√†nh CSV chunks...")
      setLoadingProgress(`B∆∞·ªõc 1/4: Chia ${data.length} records th√†nh CSV chunks`)

      // Stage 2: Optimize
      setPipelineStage("üîß ƒêang optimize CSV d·ªØ li·ªáu song song...")
      setLoadingProgress(`B∆∞·ªõc 2/4: Optimize CSV v·ªõi multiple API keys`)

      // Stage 3: Merge
      setPipelineStage("üîÑ ƒêang g·ªôp CSV d·ªØ li·ªáu ƒë√£ optimize...")
      setLoadingProgress(`B∆∞·ªõc 3/4: G·ªôp CSV d·ªØ li·ªáu ƒë√£ optimize`)

      // Stage 4: Analyze
      setPipelineStage("ü§ñ ƒêang ph√¢n t√≠ch CSV t·ªïng h·ª£p...")
      setLoadingProgress(`B∆∞·ªõc 4/4: Ph√¢n t√≠ch CSV t·ªïng h·ª£p v·ªõi AI`)

      // Ch·∫°y CSV preprocessing pipeline
      const result = await preprocessDataWithPipeline(data, tableName)

      if (result.success) {
        setOptimizedData(result.optimizedData)
        setAutoAnalysis(result.analysis)
        setKeyUsageInfo(result.keyUsage)
        setIsDataReady(true)
        setPipelineStage("‚úÖ CSV Pipeline ho√†n th√†nh!")
        console.log("‚úÖ Ho√†n th√†nh CSV Data Preprocessing Pipeline")
      } else {
        setAutoAnalysis(result.analysis)
        setIsDataReady(false)
        setPipelineStage("‚ùå CSV Pipeline th·∫•t b·∫°i")
      }
    } catch (err) {
      console.error("‚ùå L·ªói khi ch·∫°y CSV preprocessing pipeline:", err)
      setAutoAnalysis("‚ùå Kh√¥ng th·ªÉ th·ª±c hi·ªán CSV preprocessing pipeline. Vui l√≤ng th·ª≠ l·∫°i.")
      setIsDataReady(false)
      setPipelineStage("‚ùå CSV Pipeline l·ªói")
    } finally {
      setIsAutoAnalyzing(false)
      setLoadingProgress("")
      setPipelineStage("")
    }
  }

  useEffect(() => {
    const loadData = async () => {
      try {
        setLoading(true)
        setError(null)

        // Ki·ªÉm tra SDK tr∆∞·ªõc
        console.log("üîç Ki·ªÉm tra SDK status...")
        const status = await checkSDKStatus()
        setSdkStatus(`SDK Status: ${status.status} - ${status.message}`)

        if (status.status === "error") {
          throw new Error(status.message)
        }

        // Test API keys v·ªõi CSV format
        await testAPI()

        // L·∫•y th·ªëng k√™ b·∫£ng tr∆∞·ªõc
        setLoadingProgress("ƒêang l·∫•y th·ªëng k√™ b·∫£ng...")
        const stats = await getTableStats(tableId)
        setTableStats(stats)
        console.log("üìä Table stats:", stats)

        // L·∫•y T·∫§T C·∫¢ d·ªØ li·ªáu b·∫£ng
        setLoadingProgress(`ƒêang l·∫•y t·∫•t c·∫£ ${stats.totalRecords} records...`)
        console.log("üì• B·∫Øt ƒë·∫ßu l·∫•y T·∫§T C·∫¢ d·ªØ li·ªáu b·∫£ng...")
        const data = await getTableData(tableId)
        console.log("‚úÖ K·∫øt qu·∫£ cu·ªëi c√πng:", data)

        setTableData(data)

        if (data.length === 0) {
          setError("B·∫£ng kh√¥ng c√≥ d·ªØ li·ªáu ho·∫∑c kh√¥ng th·ªÉ ƒë·ªçc ƒë∆∞·ª£c records. H√£y th·ª≠ debug ƒë·ªÉ xem chi ti·∫øt.")
        } else {
          // Ki·ªÉm tra xem c√≥ d·ªØ li·ªáu th·ª±c kh√¥ng
          const hasRealData = data.some((record) =>
            Object.values(record.fields).some((value) => value !== null && value !== undefined && value !== ""),
          )

          if (hasRealData) {
            // Ch·∫°y CSV Data Preprocessing Pipeline
            console.log("üöÄ B·∫Øt ƒë·∫ßu CSV Data Preprocessing Pipeline...")
            await performDataPreprocessing(data)
          } else {
            setError("ƒê√£ l·∫•y ƒë∆∞·ª£c records nh∆∞ng kh√¥ng c√≥ th√¥ng tin chi ti·∫øt fields. Vui l√≤ng ch·∫°y debug ƒë·ªÉ kh·∫Øc ph·ª•c.")
          }
        }
      } catch (err) {
        console.error("‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu b·∫£ng:", err)
        const errorMessage = err instanceof Error ? err.message : String(err)
        setError(`L·ªói: ${errorMessage}`)
      } finally {
        setLoading(false)
        setLoadingProgress("")
      }
    }

    if (tableId) {
      loadData()
    }
  }, [tableId, tableName])

  const handleAskQuestion = async () => {
    if (!question.trim() || tableData.length === 0 || !isDataReady) return

    setIsAsking(true)
    setAnswer("") // Clear previous answer

    try {
      console.log("ü§î B·∫Øt ƒë·∫ßu tr·∫£ l·ªùi c√¢u h·ªèi v·ªõi CSV optimized data...")

      // S·ª≠ d·ª•ng CSV optimized data ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi
      const response = await answerQuestionWithData(tableData, tableName, question, autoAnalysis, optimizedData)
      setAnswer(response)
      console.log("‚úÖ ƒê√£ nh·∫≠n ƒë∆∞·ª£c c√¢u tr·∫£ l·ªùi t·ª´ AI v·ªõi CSV format")
    } catch (err) {
      console.error("‚ùå L·ªói khi h·ªèi AI:", err)
      const errorMessage = err instanceof Error ? err.message : String(err)
      setAnswer(`‚ùå L·ªói khi x·ª≠ l√Ω c√¢u h·ªèi: ${errorMessage}`)
    } finally {
      setIsAsking(false)
    }
  }

  const refreshAnalysis = async () => {
    if (tableData.length > 0) {
      await performDataPreprocessing(tableData)
    }
  }

  if (loading) {
    return (
      <div>
        <div>üîÑ ƒêang t·∫£i d·ªØ li·ªáu t·ª´ b·∫£ng &quot;{tableName}&quot;...</div>
        {tableStats && (
          <div style={{ fontSize: "12px", color: "#666", marginTop: "10px" }}>
            üìä B·∫£ng c√≥ {tableStats.totalRecords} records v√† {tableStats.totalFields} fields
          </div>
        )}
        {loadingProgress && (
          <div style={{ fontSize: "12px", color: "#007acc", marginTop: "5px" }}>{loadingProgress}</div>
        )}
        {pipelineStage && <div style={{ fontSize: "12px", color: "#ff6600", marginTop: "5px" }}>{pipelineStage}</div>}
        {sdkStatus && <div style={{ fontSize: "12px", color: "#666", marginTop: "10px" }}>{sdkStatus}</div>}
        {apiStatus && <div style={{ fontSize: "12px", color: "#666", marginTop: "5px" }}>{apiStatus}</div>}
        {isAutoAnalyzing && (
          <div style={{ fontSize: "12px", color: "#007acc", marginTop: "5px" }}>
            üöÄ ƒêang ch·∫°y CSV Data Preprocessing Pipeline...
          </div>
        )}
      </div>
    )
  }

  return (
    <div>
      <h2>üìä B·∫£ng: {tableName}</h2>

      <div style={{ marginBottom: "15px", fontSize: "12px", color: "#666" }}>
        {sdkStatus && <div>‚úÖ {sdkStatus}</div>}
        {apiStatus && <div>{apiStatus}</div>}
        {tableStats && (
          <div>
            üìä Th·ªëng k√™: {tableStats.totalRecords} records, {tableStats.totalFields} fields
          </div>
        )}
        {keyUsageInfo && (
          <div>
            üîß CSV Pipeline: {keyUsageInfo.optimizeKeys} keys optimize + 1 key analyze = {keyUsageInfo.optimizeKeys + 1}
            /{keyUsageInfo.totalKeys} keys used
            {keyUsageInfo.format && <span> | Format: {keyUsageInfo.format}</span>}
            {keyUsageInfo.csvCompressionVsJson && <span> | CSV vs JSON: {keyUsageInfo.csvCompressionVsJson}</span>}
          </div>
        )}
        {optimizedData && (
          <div style={{ color: "green" }}>
            ‚úÖ Optimized CSV data: {optimizedData.length} characters (t·ª´ {tableData.length} records)
            {keyUsageInfo?.csvCompressionVsJson && (
              <span> - CSV gi·∫£m {100 - Number.parseInt(keyUsageInfo.csvCompressionVsJson)}% tokens vs JSON</span>
            )}
          </div>
        )}
        {isDataReady && (
          <div style={{ color: "green" }}>‚úÖ CSV Data Pipeline ho√†n th√†nh - S·∫µn s√†ng tr·∫£ l·ªùi c√¢u h·ªèi!</div>
        )}
      </div>

      {error && (
        <div
          style={{
            color: "red",
            marginBottom: "20px",
            padding: "10px",
            backgroundColor: "#ffe6e6",
            borderRadius: "6px",
          }}
        >
          ‚ùå {error}
          <div style={{ marginTop: "10px" }}>
            <button onClick={runDebug} style={{ marginRight: "10px", fontSize: "12px" }}>
              üîç Detailed Debug
            </button>
            <button onClick={testAPI} style={{ marginRight: "10px", fontSize: "12px" }}>
              üß™ Test CSV APIs
            </button>
            <button onClick={testTableAccessFunc} style={{ marginRight: "10px", fontSize: "12px" }}>
              üß™ Test Access
            </button>
            <button onClick={testSample} style={{ marginRight: "10px", fontSize: "12px" }}>
              üß™ Test Sample
            </button>
            <button onClick={loadAllData} style={{ marginRight: "10px", fontSize: "12px" }}>
              üì• Load All Data
            </button>
            <button onClick={() => window.location.reload()} style={{ fontSize: "12px" }}>
              üîÑ Th·ª≠ l·∫°i
            </button>
          </div>
          {debugInfo && <div style={{ marginTop: "10px", fontSize: "12px", color: "#666" }}>{debugInfo}</div>}
        </div>
      )}

      {/* CSV Data Preprocessing Pipeline Status */}
      {(autoAnalysis || isAutoAnalyzing) && (
        <div
          style={{
            marginBottom: "20px",
            padding: "15px",
            backgroundColor: "#e8f4fd",
            borderRadius: "6px",
            border: "1px solid #007acc",
          }}
        >
          <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center", marginBottom: "10px" }}>
            <h3 style={{ margin: 0 }}>üöÄ CSV Data Preprocessing Pipeline ({tableData.length} records)</h3>
            <button onClick={refreshAnalysis} disabled={isAutoAnalyzing} style={{ fontSize: "12px" }}>
              {isAutoAnalyzing ? "üîÑ ƒêang x·ª≠ l√Ω..." : "üîÑ Ch·∫°y l·∫°i CSV Pipeline"}
            </button>
          </div>

          {isAutoAnalyzing ? (
            <div>
              <div>üöÄ ƒêang ch·∫°y CSV Data Preprocessing Pipeline v·ªõi {tableData.length} records...</div>
              {pipelineStage && <div style={{ marginTop: "5px", fontStyle: "italic" }}>{pipelineStage}</div>}
              <div style={{ marginTop: "10px", fontSize: "12px", color: "#666" }}>
                <strong>CSV Pipeline Steps:</strong>
                <br />
                1. üìä Chia d·ªØ li·ªáu ‚Üí CSV chunks
                <br />
                2. üîß Optimize CSV song song ‚Üí gi·∫£m tokens
                <br />
                3. üîÑ G·ªôp CSV d·ªØ li·ªáu ‚Üí ho√†n ch·ªânh
                <br />
                4. ü§ñ Ph√¢n t√≠ch CSV t·ªïng h·ª£p ‚Üí insights
                <br />
                <strong>CSV Benefits:</strong> Gi·∫£m 30-50% tokens so v·ªõi JSON format
              </div>
            </div>
          ) : (
            <div style={{ whiteSpace: "pre-wrap" }}>{autoAnalysis}</div>
          )}
        </div>
      )}

      <div style={{ marginBottom: "20px" }}>
        <h3>üìã D·ªØ li·ªáu b·∫£ng ({tableData.length} b·∫£n ghi):</h3>
        {tableData.length === 0 ? (
          <div style={{ padding: "20px", backgroundColor: "#f9f9f9", borderRadius: "6px", textAlign: "center" }}>
            <p>‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã</p>
            <p style={{ fontSize: "12px", color: "#666" }}>C√≥ th·ªÉ b·∫£ng tr·ªëng ho·∫∑c c√≥ v·∫•n ƒë·ªÅ v·ªõi quy·ªÅn truy c·∫≠p</p>
            <button onClick={runDebug} style={{ fontSize: "12px", marginRight: "10px" }}>
              üîç Detailed Debug
            </button>
            <button onClick={testSample} style={{ fontSize: "12px" }}>
              üß™ Test Sample
            </button>
          </div>
        ) : (
          <details>
            <summary style={{ cursor: "pointer", padding: "10px", backgroundColor: "#f9f9f9", borderRadius: "6px" }}>
              üìä Xem d·ªØ li·ªáu chi ti·∫øt ({tableData.length} records) - Click ƒë·ªÉ m·ªü/ƒë√≥ng
              {keyUsageInfo?.format && (
                <span style={{ color: "#007acc" }}> | Optimized: {keyUsageInfo.format} format</span>
              )}
            </summary>
            <pre
              style={{
                whiteSpace: "pre-wrap",
                backgroundColor: "#f9f9f9",
                padding: "10px",
                borderRadius: "6px",
                maxHeight: "400px",
                overflow: "auto",
                fontSize: "11px",
                marginTop: "10px",
              }}
            >
              {JSON.stringify(tableData.slice(0, 5), null, 2)}
              {tableData.length > 5 && `\n\n... v√† ${tableData.length - 5} records kh√°c`}
            </pre>
          </details>
        )}
      </div>

      {tableData.length > 0 && (
        <div>
          <h3>ü§ñ H·ªèi AI v·ªÅ d·ªØ li·ªáu CSV:</h3>
          <div style={{ marginBottom: "10px", fontSize: "12px", color: "#666" }}>
            {isDataReady ? (
              <>
                ‚úÖ CSV Data Pipeline ho√†n th√†nh! AI ƒë√£ nh·∫≠n ƒë∆∞·ª£c TO√ÄN B·ªò {tableData.length} records ƒë√£ optimize trong
                CSV format.
                <br />üîç V√≠ d·ª•: &quot;Ph√¢n t√≠ch theo ph√≤ng ban&quot;, &quot;Th·ªëng k√™ t√†i s·∫£n&quot;, &quot;T√¨m xu
                h∆∞·ªõng&quot;
                <br />üìä Optimized CSV data: {optimizedData.length} characters
                {keyUsageInfo?.csvCompressionVsJson && (
                  <span> (CSV gi·∫£m {100 - Number.parseInt(keyUsageInfo.csvCompressionVsJson)}% tokens vs JSON)</span>
                )}
              </>
            ) : (
              <>
                ‚è≥ ƒêang ch·∫°y CSV Data Preprocessing Pipeline... Vui l√≤ng ch·ªù.
                <br />üìä {tableData.length} records ƒëang ƒë∆∞·ª£c optimize th√†nh CSV format.
              </>
            )}
          </div>
          <textarea
            value={question}
            onChange={(e) => setQuestion(e.target.value)}
            placeholder="V√≠ d·ª•: Ph√¢n t√≠ch d·ªØ li·ªáu theo ph√≤ng ban, th·ªëng k√™ t√†i s·∫£n, t√¨m c√°c m·∫´u d·ªØ li·ªáu..."
            rows={3}
            style={{ width: "100%", marginBottom: "10px" }}
            disabled={!isDataReady}
          />
          <div style={{ marginBottom: "10px" }}>
            <button onClick={handleAskQuestion} disabled={isAsking || !question.trim() || !isDataReady}>
              {isAsking ? "ü§î ƒêang suy nghƒ©..." : "üöÄ H·ªèi AI (Optimized CSV)"}
            </button>
            <button onClick={testAPI} style={{ marginLeft: "10px", fontSize: "12px" }}>
              üß™ Test CSV Keys
            </button>
            <button onClick={refreshAnalysis} style={{ marginLeft: "10px", fontSize: "12px" }}>
              üîÑ Ch·∫°y l·∫°i CSV Pipeline
            </button>
            <button onClick={runDebug} style={{ marginLeft: "10px", fontSize: "12px" }}>
              üîç Debug
            </button>
            <button onClick={loadAllData} style={{ marginLeft: "10px", fontSize: "12px" }}>
              üì• Reload All
            </button>
          </div>

          {answer && (
            <div
              style={{
                marginTop: "20px",
                padding: "15px",
                backgroundColor: answer.includes("‚ùå") ? "#ffe6e6" : "#e8f5e8",
                borderRadius: "6px",
                border: `1px solid ${answer.includes("‚ùå") ? "#ff4444" : "#4caf50"}`,
              }}
            >
              <h4>üí° C√¢u tr·∫£ l·ªùi t·ª´ AI (Optimized CSV Pipeline - {tableData.length} records):</h4>
              <div style={{ whiteSpace: "pre-wrap" }}>{answer}</div>
              {keyUsageInfo?.csvCompressionVsJson && (
                <div style={{ marginTop: "10px", fontSize: "12px", color: "#666" }}>
                  üìä CSV Format: Gi·∫£m {100 - Number.parseInt(keyUsageInfo.csvCompressionVsJson)}% tokens so v·ªõi JSON
                </div>
              )}
            </div>
          )}
        </div>
      )}
    </div>
  )
}
